(defcustom max-ring-killed-buffer-size 50
  "number of killed buffer path record")

(defvar killed-buffer-history () 
  " killed buffer history")

(defun insert-into-buffer-killed-history ()
  (interactive)
  " insert into the killed buffer ring the path of the buffer at the newest index to potentially reload it later."
  (if (buffer-file-name)
      (add-to-history 'killed-buffer-history (buffer-file-name))))

(defun revival-buffer (path)
  " revival a buffer precedently killed"
  (interactive
   (list (read-string (format"reload file (default %s): " (car killed-buffer-history)) nil 'killed-buffer-history (car killed-buffer-history)))
   )
  (find-file path)
  )

(defun save-killed-buffer-history ()
  "save the variable killed-buffer-history in a file to reload it
for next emacs session"
  (with-temp-file "~/.emacs.d/killed-buffer-history.el"
  (progn
    (insert ";; buffer killed history file, automatically\n
    generated by revival-mode during last kill emacs\n")
    (dolist (path killed-buffer-history)
      (insert "(add-to-history 'killed-buffer-history ")
      (prin1 path (current-buffer))
      (insert ")\n"))
    )))

;;;###autoload
(define-minor-mode revival-mode
  "back alive killed buffer"
  :lighter " revival"
  :global t
  ;; (load-file "~/.emacs.d/killed-buffer-history.el")
  (add-hook 'kill-buffer-hook 'insert-into-buffer-killed-history)
  (add-hook 'kill-emacs 'save-killed-buffer-history)
  )

;;;###autoload
(add-hook 'find-file-hook 'revival-mode)

(provide 'revival-mode)


